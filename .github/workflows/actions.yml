name: Lint[no external actions]

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
  workflow_dispatch: {}

permissions:
  contents: read

concurrency:
  group: lint-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  phpcs:
    name: PHP Coding Standards
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        php: ['8.2']
    steps:
      - name: Checkout PR Head
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 1

      - name: Install PHP ${{ matrix.php }} via APT
        run: |
          set -eu
          sudo apt-get update -y
          sudo apt-get install -y --no-install-recommends software-properties-common
          sudo add-apt-repository -y ppa:ondrej/php
          sudo apt-get update -y
          v="${{ matrix.php }}"
          sudo apt-get install -y --no-install-recommends "php${v}" "php${v}-xml" "php${v}-mbstring" "php${v}-curl" "php${v}-zip"

      - name: Install Composer
        run: |
          set -eu
          EXPECTED_SIGNATURE="$(curl -fsSL https://composer.github.io/installer.sig)"
          php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
          ACTUAL_SIGNATURE="$(php -r "echo hash_file('sha384', 'composer-setup.php');")"
          [ "$EXPECTED_SIGNATURE" = "$ACTUAL_SIGNATURE" ] || { echo 'Invalid Composer installer signature' >&2; exit 1; }
          sudo php composer-setup.php --install-dir=/usr/local/bin --filename=composer --quiet
          rm composer-setup.php

      - name: Check for composer.json
        id: composer-json
        run: |
          if [ -f "composer.json" ]; then
            echo "found=true" >> "$GITHUB_OUTPUT"
          else
            echo "found=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Cache Composer dependencies
        id: composer-cache
        if: steps.composer-json.outputs.found == 'true'
        uses: actions/cache@v4
        with:
          path: vendor
          key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-

      - name: Install PHP dependencies
        if: steps.composer-json.outputs.found == 'true' && steps.composer-cache.outputs.cache-hit != 'true'
        run: |
          COMPOSER_ALLOW_SUPERUSER=1 composer install --no-progress --prefer-dist --no-scripts

      - name: Run PHPCS
        run: |
          set -eu
          if [ -x vendor/bin/phpcs ] && [ -f phpcs.xml ]; then
            echo "Using repository phpcs.xml with vendor/bin/phpcs"
            vendor/bin/phpcs -q
          else
            echo "Repository does not have a local PHPCS setup. Using global install."
            git clone --depth 1 https://github.com/WordPress/WordPress-Coding-Standards.git /tmp/wpcs
            COMPOSER_ALLOW_SUPERUSER=1 composer global require --no-interaction --no-progress "squizlabs/php_codesniffer:^3.10"
            PHPCS_BIN="$(composer global config bin-dir --absolute)/phpcs"
            "$PHPCS_BIN" --config-set installed_paths /tmp/wpcs
            files="$(git ls-files '*.php' || true)"
            if [ -n "$files" ]; then
              printf '%s\n' $files | xargs -n50 "$PHPCS_BIN" -q --standard=WordPress
            else
              echo "No PHP files to lint."
            fi
          fi

  eslint:
    name: JavaScript ESLint
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        node: ['20']
    steps:
      - name: Checkout PR Head
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 1

      - name: Check for package.json
        id: pkg
        run: |
          if [ -f "package.json" ]; then
            echo "found=true" >> "$GITHUB_OUTPUT"
          else
            echo "found=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Cache Node.js modules
        if: steps.pkg.outputs.found == 'true'
        id: npm-cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Node.js and dependencies
        if: steps.pkg.outputs.found == 'true'
        run: |
          set -eu
          export NVM_DIR="$HOME/.nvm"
          . "$NVM_DIR/nvm.sh" || {
            curl -fsSL https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash
            . "$NVM_DIR/nvm.sh"
          }
          nvm install "${{ matrix.node }}"
          nvm use "${{ matrix.node }}"
          if [ "${{ steps.npm-cache.outputs.cache-hit }}" != 'true' ]; then
            if [ -f package-lock.json ]; then
              npm ci --ignore-scripts --no-audit
            else
              npm install --ignore-scripts --no-audit
            fi
          fi
          if npm run | grep -q -E '^ *lint'; then
            npm run -s lint
          else
            echo "No 'lint' script in package.json; skipping ESLint."
          fi

      - name: Skip ESLint
        if: steps.pkg.outputs.found != 'true'
        run: echo "No package.json found. Skipping ESLint job."
