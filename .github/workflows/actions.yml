name: Lint (secure, no extra actions)

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
  workflow_dispatch: {}

permissions:
  contents: read

concurrency:
  group: lint-${{ github.workflow }}-${{ github.ref || github.run_id }}
  cancel-in-progress: true

jobs:
  phpcs:
    name: PHP Coding Standards
    if: github.event_name == 'pull_request' && github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix: { php: ['8.1'] }

    steps:
      # --- Checkout PR merge ref (fallback to head) ---
      - name: Checkout PR (merge ref)
        id: co_merge
        continue-on-error: true
        uses: actions/checkout@v4
        with:
          ref: refs/pull/${{ github.event.pull_request.number }}/merge
          fetch-depth: 1
          persist-credentials: false
          clean: true
          path: pr

      - name: Fallback to PR head
        if: steps.co_merge.outcome == 'failure'
        uses: actions/checkout@v4
        with:
          ref: refs/pull/${{ github.event.pull_request.number }}/head
          fetch-depth: 1
          persist-credentials: false
          clean: true
          path: pr

      # --- Install PHP (APT) ---
      - name: Install PHP ${{ matrix.php }} (APT)
        shell: bash --noprofile --norc
        run: |
          set -euo pipefail
          export DEBIAN_FRONTEND=noninteractive
          sudo apt-get update -y
          sudo apt-get install -y --no-install-recommends software-properties-common ca-certificates lsb-release apt-transport-https gnupg curl unzip git
          sudo add-apt-repository -y ppa:ondrej/php
          sudo apt-get update -y
          v="${{ matrix.php }}"
          sudo apt-get install -y --no-install-recommends "php${v}" "php${v}-xml" "php${v}-mbstring" "php${v}-curl" "php${v}-zip"
          sudo update-alternatives --set php "/usr/bin/php${v}" || true
          php -v

      # --- Composer (verified) ---
      - name: Install Composer (signature-verified)
        shell: bash --noprofile --norc
        run: |
          set -euo pipefail
          umask 022
          EXPECTED_SIGNATURE="$(curl --proto '=https' --tlsv1.2 -fsSL https://composer.github.io/installer.sig)"
          php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
          ACTUAL_SIGNATURE="$(php -r "echo hash_file('sha384', 'composer-setup.php');")"
          [ "$EXPECTED_SIGNATURE" = "$ACTUAL_SIGNATURE" ] || { echo 'Invalid Composer installer signature' >&2; exit 1; }
          sudo php composer-setup.php --install-dir=/usr/local/bin --filename=composer --quiet
          rm -f composer-setup.php
          composer --version

      - name: Install project PHP deps (no scripts/plugins)
        working-directory: pr
        env:
          COMPOSER_NO_INTERACTION: "1"
          COMPOSER_DISABLE_XDEBUG_WARN: "1"
        shell: bash --noprofile --norc
        run: |
          set -euo pipefail
          if [ -f composer.json ]; then
            composer install --no-progress --prefer-dist --no-scripts --no-plugins
          else
            echo "No composer.json; skipping composer install."
          fi

      # --- PHPCS (prefer repo phpcs.xml; safe file passing; only changed files) ---
      - name: Run PHPCS (changed PHP files)
        working-directory: pr
        shell: bash --noprofile --norc
        env:
          BASE_SHA: ${{ github.event.pull_request.base.sha }}
          HEAD_SHA: ${{ github.event.pull_request.head.sha }}
        run: |
          set -euo pipefail

          # Build null-delimited list of changed PHP files
          base="${BASE_SHA:-}"
          head="${HEAD_SHA:-}"
          if [ -z "$base" ] || [ -z "$head" ]; then
            base="$(git merge-base origin/${{ github.base_ref }} HEAD || true)"
            head="HEAD"
          fi
          changed="$(git diff -z --name-only --diff-filter=ACMRT "$base" "$head" -- '*.php' || true)"
          if [ -z "$changed" ]; then
            echo "No changed PHP files; skipping PHPCS."
            exit 0
          fi

          # Resolve PHPCS binary: prefer vendor, else global (no plugins/scripts)
          if [ -x vendor/bin/phpcs ]; then
            BIN="vendor/bin/phpcs"
          else
            COMPOSER_NO_INTERACTION=1 composer global require --no-progress --no-plugins --no-scripts squizlabs/php_codesniffer:^3.10
            BIN="$(composer global config bin-dir --absolute)/phpcs"
            [ -x "$BIN" ] || { echo "PHPCS not found after global install"; exit 1; }
          fi

          # Use repo phpcs.xml (exists in all org repos)
          [ -f phpcs.xml ] || { echo "phpcs.xml missing"; exit 1; }

          # Lint safely: end of options with -- ; null-delimited paths
          printf '%s' "$changed" | xargs -0 -r -n50 "$BIN" -q --standard=phpcs.xml --

  eslint:
    name: JavaScript ESLint
    if: github.event_name == 'pull_request' && github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix: { node: ['20'] }

    steps:
      # --- Checkout PR merge ref (fallback to head) ---
      - name: Checkout PR (merge ref)
        id: co_merge
        continue-on-error: true
        uses: actions/checkout@v4
        with:
          ref: refs/pull/${{ github.event.pull_request.number }}/merge
          fetch-depth: 1
          persist-credentials: false
          clean: true
          path: pr

      - name: Fallback to PR head
        if: steps.co_merge.outcome == 'failure'
        uses: actions/checkout@v4
        with:
          ref: refs/pull/${{ github.event.pull_request.number }}/head
          fetch-depth: 1
          persist-credentials: false
          clean: true
          path: pr

      - name: Detect package.json
        id: pkg
        working-directory: pr
        shell: bash --noprofile --norc
        run: |
          set -euo pipefail
          if [ -f package.json ]; then echo "found=true" >> "$GITHUB_OUTPUT"; else echo "found=false" >> "$GITHUB_OUTPUT"; fi

      # --- Node via pinned NVM (no setup-node action) ---
      - name: Install Node ${{ matrix.node }} (pinned nvm) & deps (no scripts)
        if: steps.pkg.outputs.found == 'true'
        working-directory: pr
        shell: bash --noprofile --norc
        run: |
          set -euo pipefail
          export NVM_DIR="$HOME/.nvm"
          NVM_VER="v0.39.7"
          curl --proto '=https' --tlsv1.2 -fsSLo /tmp/nvm-install.sh "https://raw.githubusercontent.com/nvm-sh/nvm/${NVM_VER}/install.sh"
          # Optional but recommended: verify installer checksum you’ve precomputed:
          # echo "<NVM_INSTALL_SHA256>  /tmp/nvm-install.sh" | sha256sum -c -
          bash /tmp/nvm-install.sh
          . "$NVM_DIR/nvm.sh"
          nvm install "${{ matrix.node }}"
          nvm use "${{ matrix.node }}"
          node -v
          npm -v

          # Install deps WITHOUT running project scripts
          if [ -f package-lock.json ]; then
            npm ci --ignore-scripts --no-audit --fund=false
          else
            npm install --ignore-scripts --no-audit --fund=false
          fi

      # --- ESLint (safe file passing; only changed files; no project scripts) ---
      - name: Run ESLint (changed JS/TS files)
        if: steps.pkg.outputs.found == 'true'
        working-directory: pr
        shell: bash --noprofile --norc
        env:
          BASE_SHA: ${{ github.event.pull_request.base.sha }}
          HEAD_SHA: ${{ github.event.pull_request.head.sha }}
        run: |
          set -euo pipefail

          # Ensure eslint binary exists
          if [ ! -x node_modules/.bin/eslint ]; then
            echo "eslint not installed; skipping."
            exit 0
          fi

          # Build null-delimited list of changed JS/TS files
          base="${BASE_SHA:-}"
          head="${HEAD_SHA:-}"
          if [ -z "$base" ] || [ -z "$head" ]; then
            base="$(git merge-base origin/${{ github.base_ref }} HEAD || true)"
            head="HEAD"
          fi
          changed="$(git diff -z --name-only --diff-filter=ACMRT "$base" "$head" -- '*.js' '*.jsx' '*.ts' '*.tsx' || true)"
          if [ -z "$changed" ]; then
            echo "No changed JS/TS files; skipping ESLint."
            exit 0
          fi

          # Run ESLint directly (don’t run npm scripts); config is eslint.config.mjs
          printf '%s' "$changed" | xargs -0 -r -n50 node_modules/.bin/eslint --
