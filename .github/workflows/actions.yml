name: Lint (no external actions)

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
  workflow_dispatch: {}

permissions:
  contents: read

concurrency:
  group: lint-${{ github.workflow }}-${{ github.ref || github.run_id }}
  cancel-in-progress: true

jobs:
  phpcs:
    name: PHP Coding Standards (no actions)
    if: github.event_name == 'pull_request' && github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    permissions:
      contents: read
    strategy:
      fail-fast: false
      matrix:
        php: ['8.1', '8.2']
    steps:
      # ----- Checkout (actions/checkout) -----
      - name: Checkout merge ref
        id: co_merge
        continue-on-error: true
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}
          ref: refs/pull/${{ github.event.pull_request.number }}/merge
          fetch-depth: 1
          persist-credentials: false
          path: pr

      - name: Fallback to head ref
        if: steps.co_merge.outcome == 'failure'
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}
          ref: refs/pull/${{ github.event.pull_request.number }}/head
          fetch-depth: 1
          persist-credentials: false
          path: pr

      # ----- PHP + Composer -----
      - name: Install PHP ${{ matrix.php }} and extensions via APT
        shell: bash
        run: |
          set -euo pipefail
          sudo apt-get update -y
          sudo apt-get install -y --no-install-recommends software-properties-common ca-certificates lsb-release apt-transport-https gnupg curl unzip git
          sudo add-apt-repository -y ppa:ondrej/php
          sudo apt-get update -y
          v="${{ matrix.php }}"
          sudo apt-get install -y --no-install-recommends "php${v}" "php${v}-xml" "php${v}-mbstring" "php${v}-curl" "php${v}-zip"
          sudo update-alternatives --set php "/usr/bin/php${v}" || true
          php -v

      - name: Install Composer (no plugins)
        shell: bash
        run: |
          set -euo pipefail
          EXPECTED_SIGNATURE="$(curl -fsSL https://composer.github.io/installer.sig)"
          php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
          ACTUAL_SIGNATURE="$(php -r "echo hash_file('sha384', 'composer-setup.php');")"
          [ "$EXPECTED_SIGNATURE" = "$ACTUAL_SIGNATURE" ] || { echo 'Invalid Composer installer signature' >&2; exit 1; }
          sudo php composer-setup.php --install-dir=/usr/local/bin --filename=composer --quiet
          rm -f composer-setup.php
          composer --version

      - name: Install project PHP deps (no scripts)
        working-directory: pr
        shell: bash
        run: |
          set -euo pipefail
          if [ -f composer.json ]; then
            COMPOSER_ALLOW_SUPERUSER=1 composer install \
              --no-interaction --no-progress --prefer-dist \
              --no-scripts --no-plugins || true
          fi

      # ----- PHPCS: prefer repo phpcs.xml; otherwise fetch standards CI-only -----
      - name: Run PHPCS (use repo phpcs.xml if present)
        id: phpcs_repo
        working-directory: pr
        shell: bash
        run: |
          set -euo pipefail
          if [ -x vendor/bin/phpcs ] && [ -f phpcs.xml ]; then
            echo "Using repository phpcs.xml with vendor/bin/phpcs"
            vendor/bin/phpcs -q
            echo "used_repo=true" >> "$GITHUB_OUTPUT"
          else
            echo "used_repo=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Fetch WordPressCS & companions (CI-only)
        if: steps.phpcs_repo.outputs.used_repo == 'false'
        shell: bash
        run: |
          set -euo pipefail
          git clone --depth 1 https://github.com/WordPress/WordPress-Coding-Standards.git /tmp/wpcs
          git clone --depth 1 https://github.com/PHPCSStandards/PHPCSUtils.git          /tmp/phpcsutils
          git clone --depth 1 https://github.com/PHPCSStandards/PHPCSExtra.git          /tmp/phpcsextra
          # Optional companions (safe if absent)
          git clone --depth 1 https://github.com/PHPCompatibility/PHPCompatibility.git   /tmp/phpcompat || true
          git clone --depth 1 https://github.com/PHPCompatibility/PHPCompatibilityWP.git /tmp/phpcompatwp || true

      - name: Ensure PHPCS binary (project or global)
        if: steps.phpcs_repo.outputs.used_repo == 'false'
        id: phpcsbin
        working-directory: pr
        shell: bash
        run: |
          set -euo pipefail
          if [ -x vendor/bin/phpcs ]; then
            echo "bin=vendor/bin/phpcs" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          COMPOSER_ALLOW_SUPERUSER=1 composer global require --no-interaction --no-progress --no-plugins --no-scripts squizlabs/php_codesniffer:^3.10
          PHPCS_BIN="$(composer global config bin-dir --absolute)/phpcs"
          [ -x "$PHPCS_BIN" ] || { echo "Failed to install global PHPCS" >&2; exit 1; }
          echo "bin=$PHPCS_BIN" >> "$GITHUB_OUTPUT"

      - name: Configure PHPCS installed_paths (CI-only)
        if: steps.phpcs_repo.outputs.used_repo == 'false'
        working-directory: pr
        shell: bash
        env:
          BIN: ${{ steps.phpcsbin.outputs.bin }}
        run: |
          set -euo pipefail
          "$BIN" --config-set installed_paths /tmp/wpcs,/tmp/phpcsextra,/tmp/phpcsutils,/tmp/phpcompat,/tmp/phpcompatwp
          echo "PHPCS standards available:"
          "$BIN" -i

      - name: Run PHPCS (WordPress standard) on tracked PHP files
        if: steps.phpcs_repo.outputs.used_repo == 'false'
        working-directory: pr
        shell: bash
        env:
          BIN: ${{ steps.phpcsbin.outputs.bin }}
        run: |
          set -euo pipefail
          files="$(git ls-files '*.php' || true)"
          if [ -z "$files" ]; then
            echo "No PHP files found."
            exit 0
          fi
          printf '%s\n' $files | xargs -n50 "$BIN" -q --standard=WordPress

  eslint:
    name: JavaScript ESLint (no actions)
    if: github.event_name == 'pull_request' && github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    permissions:
      contents: read
    strategy:
      fail-fast: false
      matrix:
        node: ['18', '20']
    steps:
      - name: Checkout merge ref
        id: co_merge
        continue-on-error: true
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}
          ref: refs/pull/${{ github.event.pull_request.number }}/merge
          fetch-depth: 1
          persist-credentials: false
          path: pr

      - name: Fallback to head ref
        if: steps.co_merge.outcome == 'failure'
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}
          ref: refs/pull/${{ github.event.pull_request.number }}/head
          fetch-depth: 1
          persist-credentials: false
          path: pr

      - name: Detect package.json
        id: pkg
        working-directory: pr
        shell: bash
        run: |
          set -euo pipefail
          if [ -f package.json ]; then echo "found=true" >> "$GITHUB_OUTPUT"; else echo "found=false" >> "$GITHUB_OUTPUT"; fi

      - name: Install Node ${{ matrix.node }} with nvm (no setup-node)
        if: steps.pkg.outputs.found == 'true'
        working-directory: pr
        shell: bash
        run: |
          set -euo pipefail
          export NVM_DIR="$HOME/.nvm"
          curl -fsSL https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash
          . "$NVM_DIR/nvm.sh"
          nvm install "${{ matrix.node }}"
          nvm use "${{ matrix.node }}"
          node -v
          npm -v
          if [ -f package-lock.json ]; then
            npm ci --ignore-scripts --no-audit --fund=false
          else
            npm install --ignore-scripts --no-audit --fund=false
          fi
          # Run ESLint directly on tracked files if available
          files="$(git ls-files '*.js' '*.jsx' '*.mjs' '*.cjs' '*.ts' '*.tsx' || true)"
          if [ -z "$files" ]; then
            echo "No JS/TS files found."
            exit 0
          fi
          if [ -x ./node_modules/.bin/eslint ]; then
            printf '%s\n' $files | xargs -n50 ./node_modules/.bin/eslint -q
          else
            echo "ESLint not found in project (./node_modules/.bin/eslint). Skipping."
          fi

      - name: Skip ESLint (no package.json)
        if: steps.pkg.outputs.found != 'true'
        run: echo "No package.json found. Skipping ESLint."
