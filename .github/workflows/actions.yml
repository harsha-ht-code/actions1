name: Lint

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
  workflow_dispatch: {}

permissions:
  contents: read

concurrency:
  group: lint-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  phpcs:
    name: PHP Coding Standards
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        php: ['8.2']
    steps:
      - name: Checkout PR Head
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 1

      - name: Cache APT packages
        uses: actions/cache@v4
        with:
          path: /var/cache/apt/archives
          key: ${{ runner.os }}-apt-packages-${{ matrix.php }}-${{ hashFiles('**/composer.lock') }}

      - name: Install PHP ${{ matrix.php }} via APT
        run: |
          set -euo pipefail
          sudo apt-get update -y
          sudo apt-get install -y --no-install-recommends software-properties-common
          sudo add-apt-repository -y ppa:ondrej/php
          sudo apt-get update -y
          v="${{ matrix.php }}"
          sudo apt-get install -y --no-install-recommends "php${v}" "php${v}-xml" "php${v}-mbstring" "php${v}-curl" "php${v}-zip"

      - name: Install and Cache Composer
        id: composer
        run: |
          set -euo pipefail
          # Install Composer
          EXPECTED_SIGNATURE="$(curl -fsSL https://composer.github.io/installer.sig)"
          php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
          ACTUAL_SIGNATURE="$(php -r "echo hash_file('sha384', 'composer-setup.php');")"
          [ "$EXPECTED_SIGNATURE" = "$ACTUAL_SIGNATURE" ] || { echo 'Invalid Composer installer signature' >&2; exit 1; }
          sudo php composer-setup.php --install-dir=/usr/local/bin --filename=composer --quiet
          rm composer-setup.php
          # Set Composer cache dir output for caching step
          echo "dir=$(composer config cache-dir)" >> "$GITHUB_OUTPUT"

      - name: Cache Composer global packages
        uses: actions/cache@v4
        with:
          path: ${{ steps.composer.outputs.dir }}
          key: ${{ runner.os }}-composer-global-${{ hashFiles('**/composer.lock') }}

      - name: Cache project vendor directory
        id: composer-vendor-cache
        uses: actions/cache@v4
        with:
          path: vendor
          key: ${{ runner.os }}-composer-vendor-${{ hashFiles('**/composer.lock') }}

      - name: Install PHP dependencies
        if: steps.composer-vendor-cache.outputs.cache-hit != 'true' && hashFiles('composer.json') != ''
        run: composer install --no-progress --prefer-dist --no-scripts

      - name: Run PHPCS
        run: |
          set -euo pipefail
          # First, try to use the project's local PHPCS
          if [ -x vendor/bin/phpcs ] && [ -f phpcs.xml ]; then
            echo "Using repository's local phpcs.xml"
            vendor/bin/phpcs -q
            exit 0
          fi

          # If local setup is missing, use a global install
          echo "Local PHPCS setup not found. Using global install with WordPress standards."
          composer global require --no-interaction --no-progress "squizlabs/php_codesniffer:^3.10"
          PHPCS_BIN="$(composer global config bin-dir --absolute)/phpcs"

          # Only clone WordPressCS if not already cached
          if [ ! -d "/tmp/wpcs" ]; then
            git clone --depth 1 https://github.com/WordPress/WordPress-Coding-Standards.git /tmp/wpcs
          fi
          "$PHPCS_BIN" --config-set installed_paths /tmp/wpcs

          # Securely find and lint PHP files
          files_to_lint=$(git ls-files -- '*.php')
          if [ -n "$files_to_lint" ]; then
            echo "$files_to_lint" | xargs -n50 "$PHPCS_BIN" -q --standard=WordPress
          else
            echo "No PHP files to lint."
          fi

  eslint:
    name: JavaScript ESLint
    if: github.event.pull_request.draft == false && hashFiles('package.json') != ''
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        node: ['20']
    steps:
      - name: Checkout PR Head
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 1

      - name: Cache NVM and Node.js
        id: cache-nvm
        uses: actions/cache@v4
        with:
          path: ~/.nvm
          key: ${{ runner.os }}-nvm-${{ matrix.node }}

      - name: Cache npm modules
        id: npm-cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}

      - name: Install Node.js and dependencies
        run: |
          set -euo pipefail
          export NVM_DIR="$HOME/.nvm"
          # Install NVM only if not restored from cache
          if [ "${{ steps.cache-nvm.outputs.cache-hit }}" != 'true' ]; then
            curl -fsSL https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash
          fi
          . "$NVM_DIR/nvm.sh"
          nvm install "${{ matrix.node }}"
          nvm use "${{ matrix.node }}"

          # Install npm packages only if node_modules not restored from cache
          if [ "${{ steps.npm-cache.outputs.cache-hit }}" != 'true' ]; then
            if [ -f package-lock.json ]; then
              npm ci --ignore-scripts --no-audit
            else
              npm install --ignore-scripts --no-audit
            fi
          fi

          # Run the lint script if it exists
          if npm run | grep -q -E '^ *lint'; then
            npm run -s lint
          else
            echo "No 'lint' script in package.json; skipping ESLint."
          fi
